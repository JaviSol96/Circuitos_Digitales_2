/* Generated by Yosys 0.9 (git sha1 1979e0b) */

(* top =  1  *)
(* src = "Counter.v:96" *)
module Counter16(clk, enb, modo, D2, Q2, rco1, rco2, rco3, rco4);
  (* src = "Counter.v:112" *)
  wire _00_;
  (* src = "Counter.v:112" *)
  wire _01_;
  (* src = "Counter.v:113" *)
  wire _02_;
  (* src = "Counter.v:114" *)
  wire _03_;
  (* src = "Counter.v:112" *)
  wire _04_;
  (* src = "Counter.v:99" *)
  input [15:0] D2;
  (* src = "Counter.v:100" *)
  output [15:0] Q2;
  (* src = "Counter.v:96" *)
  input clk;
  (* src = "Counter.v:106" *)
  wire clk2;
  (* src = "Counter.v:107" *)
  wire clk3;
  (* src = "Counter.v:108" *)
  wire clk4;
  (* src = "Counter.v:97" *)
  input enb;
  (* src = "Counter.v:98" *)
  input [1:0] modo;
  (* src = "Counter.v:109" *)
  wire modo_11;
  (* src = "Counter.v:101" *)
  output rco1;
  (* src = "Counter.v:102" *)
  output rco2;
  (* src = "Counter.v:103" *)
  output rco3;
  (* src = "Counter.v:104" *)
  output rco4;
  assign modo_11 = modo == (* src = "Counter.v:111" *) 2'h3;
  assign _01_ = rco1 && (* src = "Counter.v:112" *) _04_;
  assign _02_ = rco2 && (* src = "Counter.v:113" *) _04_;
  assign _00_ = clk && (* src = "Counter.v:114" *) modo_11;
  assign _03_ = rco3 && (* src = "Counter.v:114" *) _04_;
  assign _04_ = ! (* src = "Counter.v:114" *) modo_11;
  assign clk2 = _00_ || (* src = "Counter.v:112" *) _01_;
  assign clk3 = _00_ || (* src = "Counter.v:113" *) _02_;
  assign clk4 = _00_ || (* src = "Counter.v:114" *) _03_;
  (* module_not_derived = 32'd1 *)
  (* src = "Counter.v:118" *)
  counter contador1 (
    .D(D2[3:0]),
    .Q(Q2[3:0]),
    .clk(clk),
    .enb(enb),
    .modo(modo),
    .rco(rco1)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "Counter.v:119" *)
  counter contador2 (
    .D(D2[7:4]),
    .Q(Q2[7:4]),
    .clk(clk2),
    .enb(enb),
    .modo(modo),
    .rco(rco2)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "Counter.v:120" *)
  counter contador3 (
    .D(D2[11:8]),
    .Q(Q2[11:8]),
    .clk(clk3),
    .enb(enb),
    .modo(modo),
    .rco(rco3)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "Counter.v:121" *)
  counter contador4 (
    .D(D2[15:12]),
    .Q(Q2[15:12]),
    .clk(clk4),
    .enb(enb),
    .modo(modo),
    .rco(rco4)
  );
endmodule

(* src = "flipflop.v:4" *)
module DFF_nbits_enb(clk, enb, d, q);
  (* src = "flipflop.v:12" *)
  wire _0_;
  (* src = "flipflop.v:6" *)
  input clk;
  (* src = "flipflop.v:8" *)
  input d;
  (* src = "flipflop.v:7" *)
  input enb;
  (* src = "flipflop.v:9" *)
  output q;
  reg q;
  always @(posedge clk)
      q <= _0_;
  assign _0_ = enb ? (* src = "flipflop.v:13" *) d : q;
endmodule

(* src = "Counter.v:3" *)
module counter(clk, enb, modo, D, Q, rco);
  (* src = "Counter.v:21" *)
  wire _00_;
  (* src = "Counter.v:21" *)
  wire _01_;
  (* src = "Counter.v:21" *)
  wire _02_;
  (* src = "Counter.v:21" *)
  wire _03_;
  (* src = "Counter.v:27" *)
  (* unused_bits = "4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" *)
  wire [31:0] _04_;
  (* src = "Counter.v:28" *)
  wire _05_;
  (* src = "Counter.v:40" *)
  wire _06_;
  (* src = "Counter.v:52" *)
  wire _07_;
  (* src = "Counter.v:52" *)
  wire _08_;
  (* src = "Counter.v:63" *)
  wire _09_;
  (* src = "Counter.v:52" *)
  wire _10_;
  (* src = "Counter.v:52" *)
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  (* src = "Counter.v:39" *)
  (* unused_bits = "4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" *)
  wire [31:0] _16_;
  (* src = "Counter.v:51" *)
  (* unused_bits = "4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" *)
  wire [31:0] _17_;
  (* src = "Counter.v:6" *)
  input [3:0] D;
  (* src = "Counter.v:10" *)
  wire [3:0] D_In;
  (* src = "Counter.v:11" *)
  wire D_Out;
  (* src = "Counter.v:7" *)
  output [3:0] Q;
  (* src = "Counter.v:3" *)
  input clk;
  (* src = "Counter.v:4" *)
  input enb;
  (* src = "Counter.v:5" *)
  input [1:0] modo;
  (* src = "Counter.v:8" *)
  output rco;
  assign _04_ = Q + (* src = "Counter.v:27" *) 32'd1;
  assign _05_ = Q == (* src = "Counter.v:28" *) 4'hf;
  assign _07_ = Q == (* src = "Counter.v:52" *) 4'h1;
  assign _08_ = Q == (* src = "Counter.v:52" *) 4'h2;
  assign _06_ = ! (* src = "Counter.v:52" *) Q;
  assign _09_ = ! (* src = "Counter.v:63" *) D;
  assign _10_ = _06_ || (* src = "Counter.v:52" *) _07_;
  assign _11_ = _10_ || (* src = "Counter.v:52" *) _08_;
  assign _03_ = _09_ ? (* full_case = 32'd1 *) (* src = "Counter.v:63" *) 1'h1 : 1'h0;
  assign _02_ = _11_ ? (* full_case = 32'd1 *) (* src = "Counter.v:52" *) 1'h1 : 1'h0;
  assign _01_ = _06_ ? (* full_case = 32'd1 *) (* src = "Counter.v:40" *) 1'h1 : 1'h0;
  assign _00_ = _05_ ? (* full_case = 32'd1 *) (* src = "Counter.v:28" *) 1'h1 : 1'h0;
  function [0:0] _30_;
    input [0:0] a;
    input [3:0] b;
    input [3:0] s;
    (* full_case = 32'd1 *)
    (* src = "Counter.v:62|Counter.v:22" *)
    (* parallel_case *)
    casez (s)
      4'b???1:
        _30_ = b[0:0];
      4'b??1?:
        _30_ = b[1:1];
      4'b?1??:
        _30_ = b[2:2];
      4'b1???:
        _30_ = b[3:3];
      default:
        _30_ = a;
    endcase
  endfunction
  assign D_Out = _30_(1'hx, { _00_, _01_, _02_, _03_ }, { _15_, _14_, _13_, _12_ });
  function [3:0] _31_;
    input [3:0] a;
    input [15:0] b;
    input [3:0] s;
    (* full_case = 32'd1 *)
    (* src = "Counter.v:62|Counter.v:22" *)
    (* parallel_case *)
    casez (s)
      4'b???1:
        _31_ = b[3:0];
      4'b??1?:
        _31_ = b[7:4];
      4'b?1??:
        _31_ = b[11:8];
      4'b1???:
        _31_ = b[15:12];
      default:
        _31_ = a;
    endcase
  endfunction
  assign D_In = _31_(4'hx, { _04_[3:0], _16_[3:0], _17_[3:0], D }, { _15_, _14_, _13_, _12_ });
  assign _12_ = modo == (* full_case = 32'd1 *) (* src = "Counter.v:62|Counter.v:22" *) 2'h3;
  assign _13_ = modo == (* full_case = 32'd1 *) (* src = "Counter.v:50|Counter.v:22" *) 2'h2;
  assign _14_ = modo == (* full_case = 32'd1 *) (* src = "Counter.v:38|Counter.v:22" *) 2'h1;
  assign _15_ = ! (* full_case = 32'd1 *) (* src = "Counter.v:26|Counter.v:22" *) modo;
  assign _16_ = Q - (* src = "Counter.v:39" *) 32'd1;
  assign _17_ = Q - (* src = "Counter.v:51" *) 32'd3;
  (* module_not_derived = 32'd1 *)
  (* src = "Counter.v:83" *)
  DFF_nbits_enb DFF_1bit (
    .clk(clk),
    .d(D_Out),
    .enb(enb),
    .q(rco)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "Counter.v:79" *)
  DFF_nbits_enb DFF_4bits1 (
    .clk(clk),
    .d(D_In[0]),
    .enb(enb),
    .q(Q[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "Counter.v:80" *)
  DFF_nbits_enb DFF_4bits2 (
    .clk(clk),
    .d(D_In[1]),
    .enb(enb),
    .q(Q[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "Counter.v:81" *)
  DFF_nbits_enb DFF_4bits3 (
    .clk(clk),
    .d(D_In[2]),
    .enb(enb),
    .q(Q[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "Counter.v:82" *)
  DFF_nbits_enb DFF_4bits4 (
    .clk(clk),
    .d(D_In[3]),
    .enb(enb),
    .q(Q[3])
  );
endmodule
